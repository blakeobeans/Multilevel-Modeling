sample_size <- 15
variance <- 2
n = as.integer(6 * sample_size)
#generating individual-level responses for each group(A/B/C)/individual-predictor(0/1) combination
group_0A <- rnorm(sample_size, 0, variance)
group_1A <- rnorm(sample_size, 2, variance)
group_0B <- rnorm(sample_size, 6, variance)
group_1B <- rnorm(sample_size, 8, variance)
group_0C <- rnorm(sample_size, 12, variance)
group_1C <- rnorm(sample_size, 14, variance)
y <- c(group_0A, group_1A, group_0B, group_1B, group_0C, group_1C) #Response variable
#generate individual predictors
x <- c(rep(0, times=sample_size), rep(1, times=sample_size), rep(0, times=sample_size), rep(1, times=sample_size), rep(0, times=sample_size), rep(1, times=sample_size))
#group-level data, ID, predictors...
group_A = 0; group_B= 1; group_C = 2
group <- c(rep(1, 2*sample_size), rep(2, 2*sample_size), rep(3, 2*sample_size)) #Group ID, 200 each of group 1 and group 2
group_pred <- c(group_A, group_B, group_C)
J = as.integer(length(unique(group_pred)))
#This code creates the data set for analysis.
#Set parameters for simulated normal distributions
n = 15; std.dev = 2 ; N = as.integer(6 * n)
#Generating individual-level responses for each group A, B and C at individual-level predictor values of 0 and 1
set.seed(1234)
group_1A <- rnorm(n, 0, std.dev) ; group_1B <- rnorm(n, 2, std.dev) #pop. reg. line 1
group_2A <- rnorm(n, 6, std.dev) ; group_2B <- rnorm(n, 8, std.dev) #pop. reg. line 2
group_3A <- rnorm(n, 12, std.dev); group_3B <- rnorm(n, 14, std.dev) #pop. reg. line 3
y <- c(group_1A, group_1B, group_2A, group_2B, group_3A, group_3B) #Response variable
x <- rep(0:1, times=3, each=n) #individual predictors
#group-level data, ID, predictors...
group_1 = 0; group_2= 1; group_3 = 2
group <- rep(1:3, each=2*n) #individual predictors
group_pred <- c(group_1, group_2, group_3)
J = as.integer(length(unique(group_pred)))
x <- as.integer(rep(0:1, times=3, each=n)) #individual predictors
x <- as.numeric(rep(0:1, times=3, each=n)) #individual predictors
#This code creates the data set for analysis.
#Set parameters for simulated normal distributions
n = 15; std.dev = 2 ; N = as.integer(6 * n)
#Generating individual-level responses for each group A, B and C at individual-level predictor values of 0 and 1
set.seed(1234)
group_1A <- rnorm(n, 0, std.dev) ; group_1B <- rnorm(n, 2, std.dev) #pop. reg. line 1
group_2A <- rnorm(n, 6, std.dev) ; group_2B <- rnorm(n, 8, std.dev) #pop. reg. line 2
group_3A <- rnorm(n, 12, std.dev); group_3B <- rnorm(n, 14, std.dev) #pop. reg. line 3
y <- c(group_1A, group_1B, group_2A, group_2B, group_3A, group_3B) #Response variable
x <- as.numeric(rep(0:1, times=3, each=n)) #individual predictors
#group-level data, ID, predictors...
group_1 = 0; group_2= 1; group_3 = 2
group <- rep(1:3, each=2*n) #individual predictors
group_pred <- c(group_1, group_2, group_3)
J = as.integer(length(unique(group_pred)))
#New Version
library(R2WinBUGS)
setwd("D:/Google Drive/Life/CSUEB/Courses by Term/Spring 2018/6310- Stochastic/R Code/STAT-6310/Stochastic Project/Code")
getwd()
set.seed(1234)
sample_size <- 15
variance <- 2
n = as.integer(6 * sample_size)
#generating individual-level responses for each group(A/B/C)/individual-predictor(0/1) combination
group_0A <- rnorm(sample_size, 0, variance)
group_1A <- rnorm(sample_size, 2, variance)
group_0B <- rnorm(sample_size, 6, variance)
group_1B <- rnorm(sample_size, 8, variance)
group_0C <- rnorm(sample_size, 12, variance)
group_1C <- rnorm(sample_size, 14, variance)
y <- c(group_0A, group_1A, group_0B, group_1B, group_0C, group_1C) #Response variable
#generate individual predictors
x <- c(rep(0, times=sample_size), rep(1, times=sample_size), rep(0, times=sample_size), rep(1, times=sample_size), rep(0, times=sample_size), rep(1, times=sample_size))
#group-level data, ID, predictors...
group_A = 0; group_B= 1; group_C = 2
group <- c(rep(1, 2*sample_size), rep(2, 2*sample_size), rep(3, 2*sample_size)) #Group ID, 200 each of group 1 and group 2
group_pred <- c(group_A, group_B, group_C)
J = as.integer(length(unique(group_pred)))
#This code creates the data set for analysis.
#Set parameters for simulated normal distributions
n = 15; std.dev = 2 ; N = as.integer(6 * n)
#Generating individual-level responses for each group A, B and C at individual-level predictor values of 0 and 1
set.seed(1234)
group_1A <- rnorm(n, 0, std.dev) ; group_1B <- rnorm(n, 2, std.dev) #pop. reg. line 1
group_2A <- rnorm(n, 6, std.dev) ; group_2B <- rnorm(n, 8, std.dev) #pop. reg. line 2
group_3A <- rnorm(n, 12, std.dev); group_3B <- rnorm(n, 14, std.dev) #pop. reg. line 3
y <- c(group_1A, group_1B, group_2A, group_2B, group_3A, group_3B) #Response variable
x <- as.numeric(rep(0:1, times=3, each=n)) #individual predictors
#group-level data, ID, predictors...
group_1 = 0; group_2= 1; group_3 = 2
group <- rep(1:3, each=2*n) #individual predictors
group_pred <- c(group_1, group_2, group_3)
J = as.integer(length(unique(group_pred)))
#New Version
library(R2WinBUGS)
setwd("D:/Google Drive/Life/CSUEB/Courses by Term/Spring 2018/6310- Stochastic/R Code/STAT-6310/Stochastic Project/Code")
getwd()
set.seed(1234)
sample_size <- 15
variance <- 2
n = as.integer(6 * sample_size)
#generating individual-level responses for each group(A/B/C)/individual-predictor(0/1) combination
group_0A <- rnorm(sample_size, 0, variance)
group_1A <- rnorm(sample_size, 2, variance)
group_0B <- rnorm(sample_size, 6, variance)
group_1B <- rnorm(sample_size, 8, variance)
group_0C <- rnorm(sample_size, 12, variance)
group_1C <- rnorm(sample_size, 14, variance)
y <- c(group_0A, group_1A, group_0B, group_1B, group_0C, group_1C) #Response variable
#generate individual predictors
x <- c(rep(0, times=sample_size), rep(1, times=sample_size), rep(0, times=sample_size), rep(1, times=sample_size), rep(0, times=sample_size), rep(1, times=sample_size))
#group-level data, ID, predictors...
group_A = 0; group_B= 1; group_C = 2
group <- c(rep(1, 2*sample_size), rep(2, 2*sample_size), rep(3, 2*sample_size)) #Group ID, 200 each of group 1 and group 2
group_pred <- c(group_A, group_B, group_C)
J = as.integer(length(unique(group_pred)))
#This code creates the data set for analysis.
#Set parameters for simulated normal distributions
n = 15; std.dev = 2 ; N = as.integer(6 * n)
#Generating individual-level responses for each group A, B and C at individual-level predictor values of 0 and 1
set.seed(1234)
group_1A <- rnorm(n, 0, std.dev) ; group_1B <- rnorm(n, 2, std.dev) #pop. reg. line 1
group_2A <- rnorm(n, 6, std.dev) ; group_2B <- rnorm(n, 8, std.dev) #pop. reg. line 2
group_3A <- rnorm(n, 12, std.dev); group_3B <- rnorm(n, 14, std.dev) #pop. reg. line 3
y <- c(group_1A, group_1B, group_2A, group_2B, group_3A, group_3B) #Response variable
x <- as.numeric(rep(0:1, times=3, each=n)) #individual predictors
#group-level data, ID, predictors...
group_1 = 0; group_2= 1; group_3 = 2
group <- rep(1:3, each=2*n) #individual predictors
group_pred <- c(group_1, group_2, group_3)
J = as.integer(length(unique(group_pred)))
#This code creates the data set for analysis.
#Set parameters for simulated normal distributions
n = 15; std.dev = 2 ; N = as.integer(6 * n)
#Generating individual-level responses for each group A, B and C at individual-level predictor values of 0 and 1
set.seed(1234)
group_1A <- rnorm(n, 0, std.dev) ; group_1B <- rnorm(n, 2, std.dev) #pop. reg. line 1
group_2A <- rnorm(n, 6, std.dev) ; group_2B <- rnorm(n, 8, std.dev) #pop. reg. line 2
group_3A <- rnorm(n, 12, std.dev); group_3B <- rnorm(n, 14, std.dev) #pop. reg. line 3
y <- c(group_1A, group_1B, group_2A, group_2B, group_3A, group_3B) #Response variable
x <- as.numeric(rep(0:1, times=3, each=n)) #individual predictors
#group-level data, ID, predictors...
group_1 = 0; group_2= 1; group_3 = 2
group <- rep(1:3, each=2*n) #individual predictors
group_pred <- c(group_1, group_2, group_3)
J = as.integer(length(unique(group_pred)))
#New Version
library(R2WinBUGS)
setwd("D:/Google Drive/Life/CSUEB/Courses by Term/Spring 2018/6310- Stochastic/R Code/STAT-6310/Stochastic Project/Code")
getwd()
set.seed(1234)
sample_size <- 15
variance <- 2
n = as.integer(6 * sample_size)
#generating individual-level responses for each group(A/B/C)/individual-predictor(0/1) combination
group_0A <- rnorm(sample_size, 0, variance)
group_1A <- rnorm(sample_size, 2, variance)
group_0B <- rnorm(sample_size, 6, variance)
group_1B <- rnorm(sample_size, 8, variance)
group_0C <- rnorm(sample_size, 12, variance)
group_1C <- rnorm(sample_size, 14, variance)
y <- c(group_0A, group_1A, group_0B, group_1B, group_0C, group_1C) #Response variable
#generate individual predictors
x <- c(rep(0, times=sample_size), rep(1, times=sample_size), rep(0, times=sample_size), rep(1, times=sample_size), rep(0, times=sample_size), rep(1, times=sample_size))
#group-level data, ID, predictors...
group_A = 0; group_B= 1; group_C = 2
group <- c(rep(1, 2*sample_size), rep(2, 2*sample_size), rep(3, 2*sample_size)) #Group ID, 200 each of group 1 and group 2
group_pred <- c(group_A, group_B, group_C)
J = as.integer(length(unique(group_pred)))
group <- as.numeric(rep(1:3, each=2*n)) #individual predictors
#New Version
library(R2WinBUGS)
setwd("D:/Google Drive/Life/CSUEB/Courses by Term/Spring 2018/6310- Stochastic/R Code/STAT-6310/Stochastic Project/Code")
getwd()
set.seed(1234)
sample_size <- 15
variance <- 2
n = as.integer(6 * sample_size)
#generating individual-level responses for each group(A/B/C)/individual-predictor(0/1) combination
group_0A <- rnorm(sample_size, 0, variance)
group_1A <- rnorm(sample_size, 2, variance)
group_0B <- rnorm(sample_size, 6, variance)
group_1B <- rnorm(sample_size, 8, variance)
group_0C <- rnorm(sample_size, 12, variance)
group_1C <- rnorm(sample_size, 14, variance)
y <- c(group_0A, group_1A, group_0B, group_1B, group_0C, group_1C) #Response variable
#generate individual predictors
x <- c(rep(0, times=sample_size), rep(1, times=sample_size), rep(0, times=sample_size), rep(1, times=sample_size), rep(0, times=sample_size), rep(1, times=sample_size))
#group-level data, ID, predictors...
group_A = 0; group_B= 1; group_C = 2
group <- c(rep(1, 2*sample_size), rep(2, 2*sample_size), rep(3, 2*sample_size)) #Group ID, 200 each of group 1 and group 2
group_pred <- c(group_A, group_B, group_C)
J = as.integer(length(unique(group_pred)))
group <- as.numeric(rep(1:3, each=2*n)) #individual predictors
#This code creates the data set for analysis.
#Set parameters for simulated normal distributions
n = 15; std.dev = 2 ; N = as.integer(6 * n)
group <- as.numeric(rep(1:3, each=2*n)) #individual predictors
#This code creates the data set for analysis.
#Set parameters for simulated normal distributions
n = 15; std.dev = 2 ; N = as.integer(6 * n)
#Generating individual-level responses for each group A, B and C at individual-level predictor values of 0 and 1
set.seed(1234)
group_1A <- rnorm(n, 0, std.dev) ; group_1B <- rnorm(n, 2, std.dev) #pop. reg. line 1
group_2A <- rnorm(n, 6, std.dev) ; group_2B <- rnorm(n, 8, std.dev) #pop. reg. line 2
group_3A <- rnorm(n, 12, std.dev); group_3B <- rnorm(n, 14, std.dev) #pop. reg. line 3
y <- c(group_1A, group_1B, group_2A, group_2B, group_3A, group_3B) #Response variable
x <- as.numeric(rep(0:1, times=3, each=n)) #individual predictors
#group-level data, ID, predictors...
group_1 = 0; group_2= 1; group_3 = 2
group <- as.numeric(rep(1:3, each=2*n)) #individual predictors
group_pred <- c(group_1, group_2, group_3)
J = as.integer(length(unique(group_pred)))
#Calling WinBUGS
library(R2WinBUGS)
model.data <- list ("N", "J", "x", "y", "group", "group_pred")
model.inits <- function (){
list (a=rnorm(J), b=rnorm(1), g.0=rnorm(1), g.1=rnorm(1),
sigma.y=runif(1), sigma.a=runif(1))
}
modeled.parameters <- c ("a", "b", "g.0", "g.1", "sigma.y", "sigma.a")
model <- bugs (model.data, model.inits, modeled.parameters, "WinBUGS Model.bug", n.chains=4, n.burnin=0, n.thin = 1, n.iter=1000, bugs.directory="C:/Users/blake/Downloads/winbugs14_unrestricted/WinBUGS14")
plot (model); options("max.print"=10000); print (model); options("max.print")
sample_size <- 15
variance <- 2
n = as.integer(6 * sample_size)
#generating individual-level responses for each group(A/B/C)/individual-predictor(0/1) combination
group_0A <- rnorm(sample_size, 0, variance)
group_1A <- rnorm(sample_size, 2, variance)
group_0B <- rnorm(sample_size, 6, variance)
group_1B <- rnorm(sample_size, 8, variance)
group_0C <- rnorm(sample_size, 12, variance)
group_1C <- rnorm(sample_size, 14, variance)
y <- c(group_0A, group_1A, group_0B, group_1B, group_0C, group_1C) #Response variable
#generate individual predictors
x <- c(rep(0, times=sample_size), rep(1, times=sample_size), rep(0, times=sample_size), rep(1, times=sample_size), rep(0, times=sample_size), rep(1, times=sample_size))
#group-level data, ID, predictors...
group_A = 0; group_B= 1; group_C = 2
group <- c(rep(1, 2*sample_size), rep(2, 2*sample_size), rep(3, 2*sample_size)) #Group ID, 200 each of group 1 and group 2
group_pred <- c(group_A, group_B, group_C)
J = as.integer(length(unique(group_pred))
#This code creates the data set for analysis.
#Set parameters for simulated normal distributions
n = 15; std.dev = 2 ; N = as.integer(6 * n)
#Generating individual-level responses for each group A, B and C at individual-level predictor values of 0 and 1
set.seed(1234)
group_1A <- rnorm(n, 0, std.dev) ; group_1B <- rnorm(n, 2, std.dev) #pop. reg. line 1
group_2A <- rnorm(n, 6, std.dev) ; group_2B <- rnorm(n, 8, std.dev) #pop. reg. line 2
group_3A <- rnorm(n, 12, std.dev); group_3B <- rnorm(n, 14, std.dev) #pop. reg. line 3
y <- c(group_1A, group_1B, group_2A, group_2B, group_3A, group_3B) #Response variable
x <- as.numeric(rep(0:1, times=3, each=n)) #individual predictors
#group-level data, ID, predictors...
group_1 = 0; group_2= 1; group_3 = 2
group <- as.numeric(rep(1:3, each=2*n)) #individual predictors
group_pred <- c(group_1, group_2, group_3)
J = as.integer(length(unique(group_pred)))
sample_size <- 15
variance <- 2
n = as.integer(6 * sample_size)
#generating individual-level responses for each group(A/B/C)/individual-predictor(0/1) combination
group_0A <- rnorm(sample_size, 0, variance)
group_1A <- rnorm(sample_size, 2, variance)
group_0B <- rnorm(sample_size, 6, variance)
group_1B <- rnorm(sample_size, 8, variance)
group_0C <- rnorm(sample_size, 12, variance)
group_1C <- rnorm(sample_size, 14, variance)
y <- c(group_0A, group_1A, group_0B, group_1B, group_0C, group_1C) #Response variable
#generate individual predictors
x <- c(rep(0, times=sample_size), rep(1, times=sample_size), rep(0, times=sample_size), rep(1, times=sample_size), rep(0, times=sample_size), rep(1, times=sample_size))
#group-level data, ID, predictors...
group_A = 0; group_B= 1; group_C = 2
group <- c(rep(1, 2*sample_size), rep(2, 2*sample_size), rep(3, 2*sample_size)) #Group ID, 200 each of group 1 and group 2
group_pred <- c(group_A, group_B, group_C)
J = as.integer(length(unique(group_pred))
#This code creates the data set for analysis.
#Set parameters for simulated normal distributions
n = 15; std.dev = 2 ; N = as.integer(6 * n)
#Generating individual-level responses for each group A, B and C at individual-level predictor values of 0 and 1
set.seed(1234)
group_1A <- rnorm(n, 0, std.dev) ; group_1B <- rnorm(n, 2, std.dev) #pop. reg. line 1
group_2A <- rnorm(n, 6, std.dev) ; group_2B <- rnorm(n, 8, std.dev) #pop. reg. line 2
group_3A <- rnorm(n, 12, std.dev); group_3B <- rnorm(n, 14, std.dev) #pop. reg. line 3
y <- c(group_1A, group_1B, group_2A, group_2B, group_3A, group_3B) #Response variable
x <- as.numeric(rep(0:1, times=3, each=n)) #individual predictors
#group-level data, ID, predictors...
group_1 = 0; group_2= 1; group_3 = 2
group <- as.numeric(rep(1:3, each=2*n)) #individual predictors
group_pred <- c(group_1, group_2, group_3)
J = as.integer(length(unique(group_pred)))
#Calling WinBUGS
library(R2WinBUGS)
model.data <- list ("N", "J", "x", "y", "group", "group_pred")
model.inits <- function (){
list (a=rnorm(J), b=rnorm(1), g.0=rnorm(1), g.1=rnorm(1),
sigma.y=runif(1), sigma.a=runif(1))
}
modeled.parameters <- c ("a", "b", "g.0", "g.1", "sigma.y", "sigma.a")
model <- bugs (model.data, model.inits, modeled.parameters, "WinBUGS Model.bug", n.chains=4, n.burnin=0, n.thin = 1, n.iter=1000, bugs.directory="C:/Users/blake/Downloads/winbugs14_unrestricted/WinBUGS14")
plot (model); options("max.print"=10000); print (model); options("max.print")
#This code creates the data set for analysis.
#Set parameters for simulated normal distributions
n = 15; std.dev = 2 ; N = as.integer(6 * n)
#Generating individual-level responses for each group A, B and C at individual-level predictor values of 0 and 1
set.seed(1234)
group_1A <- rnorm(n, 0, std.dev) ; group_1B <- rnorm(n, 2, std.dev) #pop. reg. line 1
group_2A <- rnorm(n, 6, std.dev) ; group_2B <- rnorm(n, 8, std.dev) #pop. reg. line 2
group_3A <- rnorm(n, 12, std.dev); group_3B <- rnorm(n, 14, std.dev) #pop. reg. line 3
y <- c(group_1A, group_1B, group_2A, group_2B, group_3A, group_3B) #Response variable
x <- as.numeric(rep(0:1, times=3, each=n)) #individual predictors
#group-level data, ID, predictors...
group_1 = 0; group_2= 1; group_3 = 2
group <- as.numeric(rep(1:3, each=2*n)) #individual predictors
group_pred <- c(group_1, group_2, group_3)
J = as.integer(length(unique(group_pred)))
#Calling WinBUGS
library(R2WinBUGS)
model.data <- list ("N", "J", "x", "y", "group", "group_pred")
model.inits <- function (){
list (a=rnorm(J), b=rnorm(1), g.0=rnorm(1), g.1=rnorm(1),
sigma.y=runif(1), sigma.a=runif(1))
}
modeled.parameters <- c ("a", "b", "g.0", "g.1", "sigma.y", "sigma.a")
model <- bugs (model.data, model.inits, modeled.parameters, "WinBUGS Model.bug", n.chains=4, n.burnin=0, n.thin = 1, n.iter=1000, bugs.directory="C:/Users/blake/Downloads/winbugs14_unrestricted/WinBUGS14")
#This code creates the data set for analysis.
#Set parameters for simulated normal distributions
n = 15; std.dev = 2 ; N = as.integer(6 * n)
#Generating individual-level responses for each group A, B and C at individual-level predictor values of 0 and 1
set.seed(1234)
group_1A <- rnorm(n, 0, std.dev) ; group_1B <- rnorm(n, 2, std.dev) #pop. reg. line 1
group_2A <- rnorm(n, 6, std.dev) ; group_2B <- rnorm(n, 8, std.dev) #pop. reg. line 2
group_3A <- rnorm(n, 12, std.dev); group_3B <- rnorm(n, 14, std.dev) #pop. reg. line 3
y <- c(group_1A, group_1B, group_2A, group_2B, group_3A, group_3B) #Response variable
x <- as.numeric(rep(0:1, times=3, each=n)) #individual predictors
#group-level data, ID, predictors...
group_1 = 0; group_2= 1; group_3 = 2
group <- as.numeric(rep(1:3, each=2*n)) #individual predictors
group_pred <- c(group_1, group_2, group_3)
J = as.integer(length(unique(group_pred)))
#Calling WinBUGS
library(R2WinBUGS)
model.data <- list ("N", "J", "x", "y", "group", "group_pred")
model.inits <- function (){
list (a=rnorm(J), b=rnorm(1), g.0=rnorm(1), g.1=rnorm(1),
sigma.y=runif(1), sigma.a=runif(1))
}
modeled.parameters <- c ("a", "b", "g.0", "g.1", "sigma.y", "sigma.a")
model <- bugs (model.data, model.inits, modeled.parameters, "WinBUGS Model.bug", n.chains=4, n.burnin=0, n.thin = 1, n.iter=1000, bugs.directory="C:/Users/blake/Downloads/winbugs14_unrestricted/WinBUGS14",
debug = TRUE)
set.seed(1234)
sample_size <- 15
variance <- 2
n = as.integer(6 * sample_size)
#generating individual-level responses for each group(A/B/C)/individual-predictor(0/1) combination
group_0A <- rnorm(sample_size, 0, variance)
group_1A <- rnorm(sample_size, 2, variance)
group_0B <- rnorm(sample_size, 6, variance)
group_1B <- rnorm(sample_size, 8, variance)
group_0C <- rnorm(sample_size, 12, variance)
group_1C <- rnorm(sample_size, 14, variance)
z <- c(group_0A, group_1A, group_0B, group_1B, group_0C, group_1C) #Response variable
#This code creates the data set for analysis.
#Set parameters for simulated normal distributions
n = 15; std.dev = 2 ; N = as.integer(6 * n)
#Generating individual-level responses for each group A, B and C at individual-level predictor values of 0 and 1
set.seed(1234)
group_1A <- rnorm(n, 0, std.dev) ; group_1B <- rnorm(n, 2, std.dev) #pop. reg. line 1
group_2A <- rnorm(n, 6, std.dev) ; group_2B <- rnorm(n, 8, std.dev) #pop. reg. line 2
group_3A <- rnorm(n, 12, std.dev); group_3B <- rnorm(n, 14, std.dev) #pop. reg. line 3
y <- c(group_1A, group_1B, group_2A, group_2B, group_3A, group_3B) #Response variable
y=z
y==z
#generate individual predictors
z <- c(rep(0, times=sample_size), rep(1, times=sample_size), rep(0, times=sample_size), rep(1, times=sample_size), rep(0, times=sample_size), rep(1, times=sample_size))
x <- as.numeric(rep(0:1, times=3, each=n)) #individual predictors
z==x
#group-level data, ID, predictors...
group_A = 0; group_B= 1; group_C = 2
group <- c(rep(1, 2*sample_size), rep(2, 2*sample_size), rep(3, 2*sample_size)) #Group ID, 200 each of group 1 and group 2
groupz <- c(rep(1, 2*sample_size), rep(2, 2*sample_size), rep(3, 2*sample_size)) #Group ID, 200 each of group 1 and group 2
#group-level data, ID, predictors...
group_1 = 0; group_2= 1; group_3 = 2
group <- as.numeric(rep(1:3, each=2*n)) #individual predictors
group ==groupz
group_pred <- c(group_A, group_B, group_C)
group_predz <- c(group_A, group_B, group_C)
group_pred <- c(group_1, group_2, group_3)
group_pred == group_predz
Jz = as.integer(length(unique(group_pred)))
#group-level data, ID, predictors...
group_A = 0; group_B= 1; group_C = 2
group <- c(rep(1, 2*sample_size), rep(2, 2*sample_size), rep(3, 2*sample_size)) #Group ID, 200 each of group 1 and group 2
group_pred <- c(group_A, group_B, group_C)
Jz = as.integer(length(unique(group_pred)))
#group-level data, ID, predictors...
group_1 = 0; group_2= 1; group_3 = 2
group <- as.numeric(rep(1:3, each=2*n)) #individual predictors
group_pred <- c(group_1, group_2, group_3)
J = as.integer(length(unique(group_pred)))
J==Jz
#This code creates the data set for analysis.
#Set parameters for simulated normal distributions
N = 15; std.dev = 2 ; n = as.integer(6 * N)
#Generating individual-level responses for each group A, B and C at individual-level predictor values of 0 and 1
set.seed(1234)
group_1A <- rnorm(N, 0, std.dev) ; group_1B <- rnorm(N, 2, std.dev) #pop. reg. line 1
group_2A <- rnorm(N, 6, std.dev) ; group_2B <- rnorm(N, 8, std.dev) #pop. reg. line 2
group_3A <- rnorm(N, 12, std.dev); group_3B <- rnorm(N, 14, std.dev) #pop. reg. line 3
y <- c(group_1A, group_1B, group_2A, group_2B, group_3A, group_3B) #Response variable
x <- as.numeric(rep(0:1, times=3, each=N)) #individual predictors
#group-level data, ID, predictors...
group_1 = 0; group_2= 1; group_3 = 2
group <- as.numeric(rep(1:3, each=2*N)) #individual predictors
group_pred <- c(group_1, group_2, group_3)
J = as.integer(length(unique(group_pred)))
#Calling WinBUGS
library(R2WinBUGS)
model.data <- list ("n", "J", "x", "y", "group", "group_pred")
model.inits <- function (){
list (a=rnorm(J), b=rnorm(1), g.0=rnorm(1), g.1=rnorm(1),
sigma.y=runif(1), sigma.a=runif(1))
}
modeled.parameters <- c ("a", "b", "g.0", "g.1", "sigma.y", "sigma.a")
model <- bugs (model.data, model.inits, modeled.parameters, "WinBUGS Model.bug", n.chains=4, n.burnin=0, n.thin = 1, n.iter=1000, bugs.directory="C:/Users/blake/Downloads/winbugs14_unrestricted/WinBUGS14")
plot (model); options("max.print"=10000); print (model); options("max.print")
setwd("D:/Google Drive/Life/Statistics/Multi-Level Modeling")
library(R2WinBUGS)
model.data <- list ("n", "J", "x", "y", "group", "group_pred")
model.inits <- function (){
list (a=rnorm(J), b=rnorm(1), g.0=rnorm(1), g.1=rnorm(1),
sigma.y=runif(1), sigma.a=runif(1))
}
modeled.parameters <- c ("a", "b", "g.0", "g.1", "sigma.y", "sigma.a")
model <- bugs (model.data, model.inits, modeled.parameters, "WinBUGS Model.bug", n.chains=4, n.burnin=0, n.thin = 1, n.iter=1000, bugs.directory="C:/Users/blake/Downloads/winbugs14_unrestricted/WinBUGS14")
setwd("D:/Google Drive/Life/Statistics/Multi-Level Modeling")
library(R2WinBUGS)
model.data <- list ("n", "J", "x", "y", "group", "group_pred")
model.inits <- function (){
list (a=rnorm(J), b=rnorm(1), g.0=rnorm(1), g.1=rnorm(1),
sigma.y=runif(1), sigma.a=runif(1))
}
modeled.parameters <- c ("a", "b", "g.0", "g.1", "sigma.y", "sigma.a")
model <- bugs (model.data, model.inits, modeled.parameters, "WinBUGS Model.bug", n.chains=4, n.burnin=0, n.thin = 1, n.iter=1000, bugs.directory="C:/Users/blake/Downloads/winbugs14_unrestricted/WinBUGS14")
#This code creates the data set for analysis.
#Set parameters for simulated normal distributions
n = 15; std.dev = 2 ; N = as.integer(6 * n)
#Generating individual-level responses for each group A, B and C at individual-level predictor values of 0 and 1
set.seed(1234)
group_1A <- rnorm(n, 0, std.dev) ; group_1B <- rnorm(n, 2, std.dev) #pop. reg. line 1
group_2A <- rnorm(n, 6, std.dev) ; group_2B <- rnorm(n, 8, std.dev) #pop. reg. line 2
group_3A <- rnorm(n, 12, std.dev); group_3B <- rnorm(n, 14, std.dev) #pop. reg. line 3
y <- c(group_1A, group_1B, group_2A, group_2B, group_3A, group_3B) #Response variable
x <- as.numeric(rep(0:1, times=3, each=n)) #individual predictors
#group-level data, ID, predictors...
group_1 = 0; group_2= 1; group_3 = 2
group <- as.numeric(rep(1:3, each=2*n)) #individual predictors
group_pred <- c(group_1, group_2, group_3)
J = as.integer(length(unique(group_pred)))
setwd("D:/Google Drive/Life/Statistics/Multi-Level Modeling")
library(R2WinBUGS)
model.data <- list ("N", "J", "x", "y", "group", "group_pred")
model.inits <- function (){
list (a=rnorm(J), b=rnorm(1), g.0=rnorm(1), g.1=rnorm(1),
sigma.y=runif(1), sigma.a=runif(1))
}
modeled.parameters <- c ("a", "b", "g.0", "g.1", "sigma.y", "sigma.a")
model <- bugs (model.data, model.inits, modeled.parameters, "WinBUGS Model.bug", n.chains=4, n.burnin=0, n.thin = 1, n.iter=1000, bugs.directory="C:/Users/blake/Downloads/winbugs14_unrestricted/WinBUGS14")
plot (model); options("max.print"=10000); print (model); options("max.print")
'This code creates the data set for analysis.'
n = 15; std.dev = 2 ; N = as.integer(6 * n) #Set parameters for simulated normal distributions
#Generating sample regression lines for groups 1, 2 and 3
set.seed(1234)
group_1A <- rnorm(n, 0, std.dev) ; group_1B <- rnorm(n, 2, std.dev) #sample for pop. reg. line: E(x)= 2x
group_2A <- rnorm(n, 6, std.dev) ; group_2B <- rnorm(n, 8, std.dev) #sample for pop. reg. line: E(x)= 6 + 2x
group_3A <- rnorm(n, 12, std.dev); group_3B <- rnorm(n, 14, std.dev) #sample for pop. reg. line: E(x)= 12 + 2x
y <- c(group_1A, group_1B, group_2A, group_2B, group_3A, group_3B) #Response variable
x <- as.numeric(rep(0:1, times=3, each=n)) #individual predictors for each reg line at x=(0,1)
#generating group-level data
group_1 = 0; group_2= 1; group_3 = 2 #group predictor
group <- as.numeric(rep(1:3, each=2*n)) #group ID
group_pred <- c(group_1, group_2, group_3) #vector of group predictors
J = as.integer(length(unique(group_pred))) #number of groups
'Before running code, copy and paste "WinBUGS Model.bug" into working directory'
setwd("D:/Google Drive/Life/Statistics/Multi-Level Modeling")
library(R2WinBUGS)
model.data <- list ("N", "J", "x", "y", "group", "group_pred")
model.inits <- function (){
list (a=rnorm(J), b=rnorm(1), g.0=rnorm(1), g.1=rnorm(1),
sigma.y=runif(1), sigma.a=runif(1))
}
modeled.parameters <- c ("a", "b", "g.0", "g.1", "sigma.y", "sigma.a")
model <- bugs (model.data, model.inits, modeled.parameters, "WinBUGS Model.bug", n.chains=4, n.burnin=0, n.thin = 1, n.iter=1000, bugs.directory="C:/Users/blake/Downloads/winbugs14_unrestricted/WinBUGS14")
plot (model); options("max.print"=10000); print (model); options("max.print")
'This code creates the data set for analysis.'
n = 15; std.dev = 2 ; N = as.integer(6 * n) #Set parameters for simulated normal distributions
#Generating sample regression lines for groups 1, 2 and 3
set.seed(1234)
group_1A <- rnorm(n, 0, std.dev) ; group_1B <- rnorm(n, 2, std.dev) #sample for pop. reg. line: E(x)= 2x
group_2A <- rnorm(n, 6, std.dev) ; group_2B <- rnorm(n, 8, std.dev) #sample for pop. reg. line: E(x)= 6 + 2x
group_3A <- rnorm(n, 12, std.dev); group_3B <- rnorm(n, 14, std.dev) #sample for pop. reg. line: E(x)= 12 + 2x
y <- c(group_1A, group_1B, group_2A, group_2B, group_3A, group_3B) #Response variable
x <- as.numeric(rep(0:1, times=3, each=n)) #individual predictors for each reg line at x=(0,1)
#generating group-level data
group_1 = 0; group_2= 1; group_3 = 2 #group predictor
group <- as.numeric(rep(1:3, each=2*n)) #group ID
group_pred <- c(group_1, group_2, group_3) #vector of group predictors
J = as.integer(length(unique(group_pred))) #number of groups
'Before running code, copy and paste "WinBUGS Model.bug" into working directory'
setwd("D:/Google Drive/Life/Statistics/Multi-Level Modeling")
library(R2WinBUGS)
model.data <- list ("N", "J", "x", "y", "group", "group_pred")
model.inits <- function (){
list (a=rnorm(J), b=rnorm(1), g.0=rnorm(1), g.1=rnorm(1),
sigma.y=runif(1), sigma.a=runif(1))
}
modeled.parameters <- c ("a", "b", "g.0", "g.1", "sigma.y", "sigma.a")
model <- bugs (model.data, model.inits, modeled.parameters, "WinBUGS Model.bug", n.chains=4, n.burnin=0, n.thin = 1, n.iter=1000, bugs.directory="C:/Users/blake/Downloads/winbugs14_unrestricted/WinBUGS14")
plot (model); options("max.print"=10000); print (model); options("max.print")
